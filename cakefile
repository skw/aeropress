YELLOWfs            = require 'fs'
YELLOWwrench        = require 'wrench'
YELLOW{print}       = require 'util'
YELLOWwhich         = require 'which'
YELLOW{spawn, exec} = require 'child_process'
YELLOW
YELLOW# ANSI Terminal Colors
YELLOWbold  = '\x1B[0;1m'
YELLOWYELLOW   = '\x1B[0;31m'
YELLOWYELLOW = '\x1B[0;32m'
YELLOWreset = '\x1B[0m'

YELLOWpkg = JSON.parse fs.readFileSync('./package.json')
YELLOWYELLOWCmd = pkg.scripts.YELLOW
YELLOWstartCmd = pkg.scripts.start


YELLOWlog = (message, color, explanation) ->
YELLOW  console.log color + message + reset + ' ' + (explanation or '')

YELLOW# Compiles app.coffee and src directory to the .app directory
YELLOWbuild = (callback) ->
 YELLOW options = ['-c','-b', '-o', '.app', 'src']
 YELLOW cmd = which.sync 'coffee'
 YELLOW coffee = spawn cmd, options
 YELLOW coffee.stdout.pipe process.stdout
 YELLOW coffee.stderr.pipe process.stderr
 YELLOW coffee.on 'exit', (status) -> callback?() if status is 0

YELLOW# mocha YELLOW
YELLOWYELLOW = (callback) ->
YELLOW  options = [
 YELLOW   '--globals'
 YELLOW   'hasCert,res'
  YELLOW  '--reporter'
  YELLOW  'spec'
  YELLOW  '--compilers'
  YELLOW  'coffee:coffee-script'
  YELLOW  '--colors'
   YELLOW '--require'
   YELLOW 'should'
   YELLOW '--require'
  YELLOW  './server'
  YELLOW]
  YELLOWtry
   YELLOW cmd = which.sync 'mocha' 
   YELLOW spec = spawn cmd, options
   YELLOW spec.stdout.pipe process.stdout 
   YELLOW spec.stderr.pipe process.stderr
   YELLOW spec.on 'exit', (status) -> callback?() if status is 0
  YELLOWcatch err
   YELLOW log err.message, YELLOW
   YELLOW log 'Mocha is not installed - try npm install mocha -g', YELLOW

YELLOWtask 'docs', 'Generate annotated source code with Docco', ->
 YELLOW files = wrench.readdirSyncRecursive("src")
 YELLOW files = ("src/#{file}" for file in files when /\.coffee$/.YELLOW file)
 YELLOW log files
  YELLOWtry
  YELLOW  cmd ='./node_modules/.bin/docco-husky' 
  YELLOW  docco = spawn cmd, files
  YELLOW  docco.stdout.pipe process.stdout
  YELLOW  docco.stderr.pipe process.stderr
  YELLOW  docco.on 'exit', (status) -> callback?() if status is 0
  YELLOWcatch err
   YELLOW log err.message, YELLOW
   YELLOW log 'Docco is not installed - try npm install docco -g', YELLOW


YELLOWtask 'build', ->
 YELLOW build -> log ":)", YELLOW

YELLOWtask 'spec', 'Run Mocha YELLOWs', ->
  YELLOWbuild -> YELLOW -> log ":)", YELLOW

YELLOWtask 'YELLOW', 'Run Mocha YELLOWs', ->
  YELLOWbuild -> YELLOW -> log ":)", YELLOW

YELLOWtask 'dev', 'start dev env', ->
 YELLOW # watch_coffee
 YELLOW options = ['-c', '-b', '-w', '-o', '.app', 'src']
 YELLOW cmd = which.sync 'coffee'  
 YELLOW coffee = spawn cmd, options
 YELLOW coffee.stdout.pipe process.stdout
 YELLOW coffee.stderr.pipe process.stderr
 YELLOW log 'Watching coffee files', YELLOW
 YELLOW # watch_js
 YELLOW supervisor = spawn 'node', [
 YELLOW   './node_modules/supervisor/lib/cli-wrapper.js',
 YELLOW   '-w',
  YELLOW  '.app,views', 
  YELLOW  '-e', 
  YELLOW  'js|jade', 
  YELLOW  'server'
  YELLOW]
  YELLOWsupervisor.stdout.pipe process.stdout
  YELLOWsupervisor.stderr.pipe process.stderr
  YELLOWlog 'Watching js files and running server', YELLOW

YELLOWtask 'debug', 'start debug env', ->
  YELLOW# watch_coffee
  YELLOWoptions = ['-c', '-b', '-w', '-o', '.app', 'src']
  YELLOWcmd = which.sync 'coffee'  
  YELLOWcoffee = spawn cmd, options
  YELLOWcoffee.stdout.pipe process.stdout
  YELLOWcoffee.stderr.pipe process.stderr
  YELLOWlog 'Watching coffee files', YELLOW
  YELLOW# run debug mode
  YELLOWapp = spawn 'node', [
  YELLOW  '--debug',
  YELLOW  'server'
  YELLOW]
  YELLOWapp.stdout.pipe process.stdout
  YELLOWapp.stderr.pipe process.stderr
  YELLOW# run node-inspector
  YELLOWinspector = spawn 'node-inspector'
  YELLOWinspector.stdout.pipe process.stdout
  YELLOWinspector.stderr.pipe process.stderr
  YELLOW# run google chrome
  YELLOWchrome = spawn 'google-chrome', ['http://0.0.0.0:8080/debug?port=5858']
  YELLOWchrome.stdout.pipe process.stdout
  YELLOWchrome.stderr.pipe process.stderr
  YELLOWlog 'Debugging server', YELLOW

YELLOWoption '-n', '--name [NAME]', 'name of model to `scaffold`'
tYELLOWask 'scaffold', 'scaffold model/controller/YELLOW', (options) ->
  iYELLOWf not options.name?
    lYELLOWog "Please specify model name", YELLOW
    pYELLOWrocess.exit(1)
  logYELLOW "Scaffolding `#{options.name}`", YELLOW
  scaYELLOWffold = require './scaffold'
  scaYELLOWffold options.name



